name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Download data package
      run: |
        # Get the latest release
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/Baumann-Digital/baudi-data/releases/latest")
        
        # Extract the browser download URL for the .xar asset
        DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | endswith(".xar")) | .browser_download_url')
        
        # Check if download URL was found
        if [ "$DOWNLOAD_URL" = "null" ] || [ -z "$DOWNLOAD_URL" ]; then
          echo "Error: No .xar asset found in the latest release"
          echo "Available assets:"
          echo "$LATEST_RELEASE" | jq -r '.assets[].name'
          exit 1
        fi
        
        echo "Downloading from: $DOWNLOAD_URL"
        
        # Download the asset
        curl -L -o autodeploy/baudiData-latest.xar "$DOWNLOAD_URL"
        
        # Verify the download
        if [ ! -f "autodeploy/baudiData-latest.xar" ] || [ ! -s "autodeploy/baudiData-latest.xar" ]; then
          echo "Error: Download failed or file is empty"
          exit 1
        fi
        
        echo "Software package downloaded successfully"
        ls -la autodeploy/
    
    - name: Download the portal-app software
      run: |
        # Get the latest release
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/Baumann-Digital/portal-app/releases/latest")
        
        # Extract the browser download URL for the .xar asset
        DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | endswith(".xar")) | .browser_download_url')
        
        # Check if download URL was found
        if [ "$DOWNLOAD_URL" = "null" ] || [ -z "$DOWNLOAD_URL" ]; then
          echo "Error: No .xar asset found in the latest release"
          echo "Available assets:"
          echo "$LATEST_RELEASE" | jq -r '.assets[].name'
          exit 1
        fi
        
        echo "Downloading from: $DOWNLOAD_URL"
        
        # Download the asset
        curl -L -o autodeploy/baudiApp-latest.xar "$DOWNLOAD_URL"
        
        # Verify the download
        if [ ! -f "autodeploy/baudiApp-latest.xar" ] || [ ! -s "autodeploy/baudiApp-latest.xar" ]; then
          echo "Error: Download failed or file is empty"
          exit 1
        fi
        
        echo "Software package downloaded successfully"
        ls -la autodeploy/
    
    - name: Download the Edirom software
      run: |
        # Get the latest release
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/Edirom/Edirom-Online/releases/191696703"")
        
        # Extract the browser download URL for the .xar asset
        DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | endswith(".xar")) | .browser_download_url')
        
        # Check if download URL was found
        if [ "$DOWNLOAD_URL" = "null" ] || [ -z "$DOWNLOAD_URL" ]; then
          echo "Error: No .xar asset found in the latest release"
          echo "Available assets:"
          echo "$LATEST_RELEASE" | jq -r '.assets[].name'
          exit 1
        fi
        
        echo "Downloading from: $DOWNLOAD_URL"
        
        # Download the asset
        curl -L -o autodeploy/edirom-v100.xar "$DOWNLOAD_URL"
        
        # Verify the download
        if [ ! -f "autodeploy/edirom-v100.xar" ] || [ ! -s "autodeploy/edirom-v100.xar" ]; then
          echo "Error: Download failed or file is empty"
          exit 1
        fi
        
        echo "Edirom Software package downloaded successfully"
        ls -la autodeploy/
    
    - name: Download the crApp software
      run: |
        # Get the latest release
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/riedde/crApp/releases/latest")
        
        # Extract the browser download URL for the .xar asset
        DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | endswith(".xar")) | .browser_download_url')
        
        # Check if download URL was found
        if [ "$DOWNLOAD_URL" = "null" ] || [ -z "$DOWNLOAD_URL" ]; then
          echo "Error: No .xar asset found in the latest release"
          echo "Available assets:"
          echo "$LATEST_RELEASE" | jq -r '.assets[].name'
          exit 1
        fi
        
        echo "Downloading from: $DOWNLOAD_URL"
        
        # Download the asset
        curl -L -o autodeploy/crApp-latest.xar "$DOWNLOAD_URL"
        
        # Verify the download
        if [ ! -f "autodeploy/crApp-latest.xar" ] || [ ! -s "autodeploy/crApp-latest.xar" ]; then
          echo "Error: Download failed or file is empty"
          exit 1
        fi
        
        echo "Software package downloaded successfully"
        ls -la autodeploy/
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max